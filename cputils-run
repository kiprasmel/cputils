#!/usr/bin/env bash
# the good stuff

if [ -z "$1" ]; then
	printf "
usage:

cputils-run MODE filename.cpp

	MODE = DEBUG or EVAL or custom #define

"
	exit 1
else
	MODE_DEFINE="$1"
	shift
fi

[ -z "$1" ] && {
	printf "usage: d filename.cpp\n\n"
	exit 1
}

INPUT_FILE="$1"

# remove extension & add ".out" suffix (easier to .gitignore etc)
# https://stackoverflow.com/a/36341390/9285308
OUTPUT_FILE="${INPUT_FILE%.*}.out"

# INPUT_FROM_CLIPBOARD="$(xclip -selection primary -o || xclip -selection clipboard -o)"
INPUT_FROM_CLIPBOARD="$(xclip -selection clipboard -o || xclip -selection primary -o)"

INPUT_CACHE_FILE="$1.in"
touch "$INPUT_CACHE_FILE"
INPUT_FROM_CACHE_FILE="$(cat $INPUT_CACHE_FILE)"

if [ -z "$2" ]; then
	WHICH_INPUT_USED="CLIPBOARD"
	INPUT="$INPUT_FROM_CLIPBOARD"

	# prepend the input from clipboard into the cache file
	mv "$INPUT_CACHE_FILE" "$INPUT_CACHE_FILE.bp"
	printf "$INPUT\n\n\n" >> "$INPUT_CACHE_FILE"
	cat "$INPUT_CACHE_FILE.bp" >> "$INPUT_CACHE_FILE"
	rm "$INPUT_CACHE_FILE.bp"
elif [ -z "$3" ]; then
	WHICH_INPUT_USED="FILE ($INPUT_CACHE_FILE)"

	INPUT="$INPUT_FROM_CACHE_FILE"

	# do not prepend the input
else
	WHICH_INPUT_USED="FILE ($3)"

	INPUT_FROM_CUSTOM_FILE="$(cat $3)"
	INPUT="$INPUT_FROM_CUSTOM_FILE"
fi

printf "BEGIN INPUT\n$INPUT\nEND INPUT\n"
printf "$WHICH_INPUT_USED\n\n"

# run based on time cmd (best if GNU /usr/bin/time is available)
if command -v /usr/bin/env time &>/dev/null; then
	TIME_CMD="/usr/bin/env time"
	TIME_CMD_ARGS="-f \nmem  %M KB\nreal %es\nuser %Us \nsys  %Ss\n"
	g++ -std=c++17 "$INPUT_FILE" -o "$OUTPUT_FILE" -Wall -D $MODE_DEFINE && printf "$INPUT\n" | ($TIME_CMD "$TIME_CMD_ARGS" "$OUTPUT_FILE")
else
	g++ -std=c++17 "$INPUT_FILE" -o "$OUTPUT_FILE" -Wall -D $MODE_DEFINE && printf "$INPUT\n" | (time "$OUTPUT_FILE")
fi

