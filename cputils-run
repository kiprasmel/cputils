#!/usr/bin/env bash
# the good stuff

CFGDIR="$HOME/.config/cputils"

source "$CFGDIR/cputils.config.bash"

[ -z "$CPP_COMPILER_DEFAULT_ARGS" ] && {
	CPP_COMPILER_DEFAULT_ARGS="-std=c++17 -g -Wall"
}

[ -z "$INPUT_CACHE_FILE_EXTENSION" ] && {
	INPUT_CACHE_FILE_EXTENSION="cpp.txt"
}

REPO_URL="https://github.com/kiprasmel/cputils"

USAGE="\
usage:

cputils-run FILENAME.cpp [OPTIONS]... [-- EXTRA_COMPILER_ARGS]

  where
    FILENAME.cpp                = source file you want to run

    -f [INPUT_FILE]             = read input from (default) INPUT_FILE
                                  instead of reading from stdin

    INPUT_FILE                  = specify your own INPUT_FILE instead of the default
                                  default: FILENAME.$INPUT_CACHE_FILE_EXTENSION (configurable)

    -c                          = read input from clipboard

    -r, --recompile             = force recompilation no matter if the file hash
                                  matches previously compiled file's hash
                                  default: false

                                  note: this does not matter if the user has not
                                  provided a hashing function in their config.
                                  see README for more info

    -e, --edit                  = edit the INPUT_FILE with configured editor
    
    -a \"EXTRA_COMPILER_ARGS\"    = pass arguments to the compiler (quotes necessary),
                                  can be used multiple times.

                                  hint: set custom #define's from here
                                  or override default settings etc.
                                  very useful for shell aliases / functions
                                  (see the examples below)

    -- EXTRA_COMPILER_ARGS      = same as \`-a\`, just for extra convenience
                                  (no quotes needed, must be used at most once,
                                  since \`--\` will stop argument parsing
                                  and will forward everything to the compiler)

    -h                          = see this

    --help                      = see this + examples (even if hidden via config)

"

EXAMPLES="\
examples (hideable via config):

  simple:
    cputils-run a.cpp                # reads input from stdin (if a.cpp needs it)
    cputils-run a.cpp -c             # reads input from clipboard
    cputils-run a.cpp -f             # reads input from file \`a.$INPUT_CACHE_FILE_EXTENSION\`
    cputils-run a.cpp -f in          # reads input from file \`in\`
    cputils-run a.cpp <  in          # reads input from stdin redirect (from file \`in\`)
    cat in | cputils-run a.cpp       # reads input from stdin pipe     (from file \`in\`)

  with args to the compiler:
    cputils-run a.cpp          -- -DDEBUG -std=c++98 -Wextra -Wpedantic
    cputils-run a.cpp -f       -- -DDEBUG -std=c++11 -Wl,--stack,\$((2 ** 28)) 
    cputils-run a.cpp -f in    -- -DEVAL  -std=c++14 -O2
	cputils-run a.cpp          --         -std=c++17 -O3 < in
    cat in | cputils-run a.cpp --         -std=c++20 -O3

  using alias functions:

  .bashrc / .zshrc / etc:
  
  ...sh
  xd() { cputils-run -a \"-DDEBUG\" \$* }
  ...

  and replace \`cputils-run a.cpp\`
  with        \`xd a.cpp\`


"

[ -z "$HIDE_EXAMPLES" ] && {
	HIDE_EXAMPLES=0
}

if [ "$HIDE_EXAMPLES" -eq 1 ]; then
	USAGE_FULL="$USAGE\n"
else
	USAGE_FULL="$USAGE\n$EXAMPLES"
fi

# parse arguments

[ -z "$1" ] && {
	printf "$USAGE_FULL"
	exit 1
}

trim_extension() {
	printf "${1%.*}"
}

get_extension() {
	printf "${1##*.}"
}

EXTRA_FROM_ALIAS=""

while (( $# )); do
	case "$1" in
		-)
			# TODO: improve even further
			# e.g. do not print BEGIN/END INPUT
			# if the input is coming from the terminal
			# see https://serverfault.com/a/156510/506302

			WHICH_INPUT_USED="STDIN"
			shift
			;;

		-f)
			WHICH_INPUT_USED="FILE_CACHE"
			shift
			;;

		-c)
			WHICH_INPUT_USED="CLIPBOARD"
			shift
			;;

		-e|--edit)
			EDIT_INPUT_FILE=1
			shift
			;;

		-r|--force-recompile|--force-compile|--recompile|--compile)
			FORCE_RECOMPILE=1
			shift
			;;

		-h)
			shift
			printf "$USAGE_FULL"
			exit 0
			;;

		--help)
			shift
			printf "$USAGE\n$EXAMPLES"
			exit 0
			;;

		-a)
			shift
			EXTRA_FROM_ALIAS="$EXTRA_FROM_ALIAS $1"
			shift
			;;

		--)
			shift
			break
			# stop parsing and forward rest of arguments
			# to the compiler
			;;

		*)
			if [ -z "$INPUT_FILE" ]; then
				if [ "$WHICH_INPUT_USED" = "FILE_CACHE" ]; then
					WHICH_INPUT_USED="FILE_CUSTOM"
					CUSTOM_INPUT_FILE="$1"
					shift

				else
					INPUT_FILE="$1"

					[[ "$INPUT_FILE" =~ \.$INPUT_CACHE_FILE_EXTENSION$ ]] && {
						# remove the configured extension suffix -
						# likely a mistake by the user,
						# since we're adding the suffix ourselves

						INPUT_FILE="$(trim_extension "$INPUT_FILE")"
					}

					shift
				fi
			
			elif [ -n "$WHICH_INPUT_USED" ] && [ "$WHICH_INPUT_USED" = "FILE_CACHE" ]; then
				WHICH_INPUT_USED="FILE_CUSTOM"
				CUSTOM_INPUT_FILE="$1"
				shift

			else
				printf "\nerror: unrecognized option: $1\n\n"

				printf "$USAGE"

				printf "\nerror: unrecognized option: $1\n\n"

				shift
				exit 1
			fi
			;;
	esac
done

if [ -z "$INPUT_FILE" ]; then
	# if user provided \`- INPUT_FILE\`, we parsed it as
	# \`- CUSTOM_INPUT_FILE\` (not the source file, but the data file),
	# thus reverse it
	# (though without extra sugar of removing the extra
	# $INPUT_CACHE_FILE_EXTENSION to make it very obvious
	# for the user if they made a mistake)
	#
	# otherwise - INPUT_FILE was not provided in any way
	# 
	if [ -n "$CUSTOM_INPUT_FILE" ]; then
		INPUT_FILE="$CUSTOM_INPUT_FILE"
		unset CUSTOM_INPUT_FILE
		WHICH_INPUT_USED="FILE_CACHE"
	else

		printf "\
cputils-run error:

source file not provided

"
		exit 1
	fi
fi

[ ! -f "$INPUT_FILE" ] && {
	printf "\
cputils-run error:

input source file ($INPUT_FILE) does not exist

consult \`cputils-run -h\`

"
	exit 1
}

[ -z "$WHICH_INPUT_USED" ] && {
	# disabled this because it would always read from stdin
	# if input was unset instead of the clipboard,
	# and it does not work the way you'd expect
	# [ -z "$STDIN" ] && WHICH_INPUT_USED="CLIPBOARD" || WHICH_INPUT_USED="STDIN"

	# WHICH_INPUT_USED="CLIPBOARD"
	WHICH_INPUT_USED="STDIN"
}
[ -z "$FORCE_RECOMPILE" ] && FORCE_RECOMPILE=0
[ -z "$EDIT_INPUT_FILE" ] && EDIT_INPUT_FILE=0

# echo "INPUT_FILE $INPUT_FILE; WHICH_INPUT_USED $WHICH_INPUT_USED; CUSTOM_INPUT_FILE $CUSTOM_INPUT_FILE;"

# remove extension & add ".out" suffix (easier to .gitignore etc)
# https://stackoverflow.com/a/36341390/9285308
#
# the path and filename need to be extracted
# to handle both cases:
# a) user provides path to the filename
# b) user provides filename (path is current working dir)
# with this, it works in both cases
#
INPUT_FILE_PATH="$(dirname "$INPUT_FILE")"
INPUT_FILE_FILENAME="$(basename "$INPUT_FILE")"
INPUT_FILE_FILENAME_EXTLESS="$(trim_extension "$INPUT_FILE_FILENAME")"
INPUT_FILE_EXT="$(get_extension "$INPUT_FILE_FILENAME")"

#
# We've decided to output the file WITH the ".cpp" extension
# (and then add ".out"),
# since this allows for faster file completion in the terminal!
#
# Might make configurable
#
### OUTPUT_FILE="$INPUT_FILE_PATH/$INPUT_FILE_FILENAME_EXTLESS.out"
OUTPUT_FILE="$INPUT_FILE_PATH/$(create_output_file_name "$INPUT_FILE_FILENAME_EXTLESS" "$INPUT_FILE_EXT")"

INPUT_CACHE_FILE="$INPUT_FILE_FILENAME_EXTLESS.$INPUT_CACHE_FILE_EXTENSION"

# handle input cache file editing instead of running
if [ "$EDIT_INPUT_FILE" -eq 1 ]; then
	if [ "$WHICH_INPUT_USED" = "FILE_CUSTOM" ]; then
		touch "$CUSTOM_INPUT_FILE"
		open_with_editor "$CUSTOM_INPUT_FILE"
		exit $?

	elif [ "$WHICH_INPUT_USED" = "FILE_CACHE" ]; then
		touch "$INPUT_CACHE_FILE"
		open_with_editor "$INPUT_CACHE_FILE"
		exit $?

	elif [ "$WHICH_INPUT_USED" = "CLIPBOARD" ]; then
		touch "$INPUT_CACHE_FILE"
		open_with_editor "$INPUT_CACHE_FILE"
		exit $?

	else
		printf "\
cputils-run error:

cannot edit input file since it's not selected.

use \`-\`            to select the default input file ($INPUT_CACHE_FILE)
or  \`- INPUT_FILE\` to select          a custom file \`INPUT_FILE\`

"
		exit 1
	fi

	exit 1
fi

# make sure the file either already exists,
# or we create it if it's expected.
# otherwise error.
[ "$WHICH_INPUT_USED" = "FILE_CACHE" ] && {
	touch "$INPUT_CACHE_FILE"
}

[ "$WHICH_INPUT_USED" = "FILE_CUSTOM" ] && {
	! [ -f "$CUSTOM_INPUT_FILE" ] && {
		>&2 printf "\
cputils-run error:

custom input file ($CUSTOM_INPUT_FILE) does not exit.

"

		exit 1
	}
}

# determine INPUT and INPUT_INFO

if [ "$WHICH_INPUT_USED" = "STDIN" ]; then
	INPUT_INFO="STDIN"
	#STDIN="$(cat -)"
	#INPUT="$STDIN"

elif [ "$WHICH_INPUT_USED" = "CLIPBOARD" ]; then
	INPUT_INFO="CLIPBOARD"
	INPUT="$(paste_from_clipboard)"
	CLIPBOARD_RETURN_STATUS=$?

	CLIPBOARD_INFO="\
Either:
  a) use an input file, or
  b) pipe / forward from stdin, or
  c) go to the config file \`$CFGDIR/cputils.config.bash\`
     and provide a way to paste from your clipboard
     in the \`paste_from_clipboard\` function.
"

	if [ -z "$INPUT" ]; then

		if [ "$CLIPBOARD_RETURN_STATUS" -eq 0 ]; then
			: # pass

		elif [ $CLIPBOARD_RETURN_STATUS -eq 1 ] || [ $CLIPBOARD_RETURN_STATUS -eq $STATUS_CLIPBOARD_FAILURE ]; then
			>&2 printf "\
cputils-run error: we couldn't read input from your clipboard.

$CLIPBOARD_INFO

"
			exit 1

		elif [ $CLIPBOARD_RETURN_STATUS -eq $STATUS_CLIPBOARD_UNHANDLED ]; then
			>&2 printf "\
cputils-run error: your clipboard is not supported

$CLIPBOARD_INFO

"
			exit 1

		else
			>&2 printf "\
cputils-run error: unknown return status from clipboard ($CLIPBOARD_RETURN_STATUS)

$CLIPBOARD_INFO

---

validate your config is working correctly,
and if this still breaks - create an issue:

$REPO_URL

"

		fi # clipboard set up correctly
	fi # input not empty

	# prepend the input from clipboard into the cache file
	mv "$INPUT_CACHE_FILE" "$INPUT_CACHE_FILE.bp"
	printf "$INPUT\n\n\n" >> "$INPUT_CACHE_FILE"
	cat "$INPUT_CACHE_FILE.bp" >> "$INPUT_CACHE_FILE"
	rm "$INPUT_CACHE_FILE.bp"

elif [ "$WHICH_INPUT_USED" = "FILE_CACHE" ]; then
	INPUT_INFO="FILE ($INPUT_CACHE_FILE)"
	INPUT="$(cat "$INPUT_CACHE_FILE")"

elif [ "$WHICH_INPUT_USED" = "FILE_CUSTOM" ]; then
	INPUT_INFO="FILE ($CUSTOM_INPUT_FILE)"
	INPUT="$(cat $CUSTOM_INPUT_FILE)"

else
	printf "\
cputils-run error: parsing arguments went wrong ¯\\_(:c)_/¯

create an issue here:
$REPO_URL

"
	exit 1
fi

# determine if it's safe to skip compilation 

INPUT_HASH_FILE="$INPUT_FILE_FILENAME.hash"
NEW_SOURCE_FILE_HASH="$(create_hash "$INPUT_FILE")"
CREATE_HASH_RETURN_STATUS=$?

if [ ! -f "$OUTPUT_FILE" ] && [ ! -f "$INPUT_HASH_FILE" ]; then
	FIRST_TIME_COMPILE=1
else
	FIRST_TIME_COMPILE=0
fi

if [ "$CREATE_HASH_RETURN_STATUS" -ne 0 ]; then
	HASHING_ENABLED=0
else
	HASHING_ENABLED=1

	touch "$INPUT_HASH_FILE"
	OLD_HASH="$(cat "$INPUT_HASH_FILE")"
fi

#
# the outcome depends on other side effects - extra args to the compiler
# come to mind. We might've missed something -- take care
# 
# the separator '@' is picked arbitrarily; it's only important that it's there
#
NEW_HASH="\
NEW_SOURCE_FILE_HASH \"$NEW_SOURCE_FILE_HASH\"
CPP_COMPILER_DEFAULT_ARGS \"$CPP_COMPILER_DEFAULT_ARGS\"
EXTRA_FROM_ALIAS \"$EXTRA_FROM_ALIAS\"
\$* \"$*\"\
"

#
# the user by default will have the 'create_hash' function disabled,
# thus $NEW_HASH will be an empty string, which is not allowed,
# thus we never skip compilation
#
# otherwise, we do not check the $OLD_HASH, since it is allowed
# for it to be empty (always happens at the very first run)
# 
#
if [ "$OLD_HASH" = "$NEW_HASH" ] && [ "$HASHING_ENABLED" -eq 1 ] && [ "$FORCE_RECOMPILE" -ne 1 ] && [ -f "$OUTPUT_FILE" ]; then
	SAFE_TO_SKIP_COMPILATION=1
else
	SAFE_TO_SKIP_COMPILATION=0
fi

# TODO FIXME: BROKEN
#### determine if we'll pipe input
#### or if we'll leave it up for the executable
#### to figure out itself
###if [ "$WHICH_INPUT_USED" = "STDIN" ]; then
###	CONDITIONAL_INPUT_PIPER=""
###else
###	# careful here lmao, test thoroughly
###	CONDITIONAL_INPUT_PIPER="printf "$INPUT" |"
###fi

# run based on time cmd (best if GNU /usr/bin/time is available)
if command -v /usr/bin/time &>/dev/null; then
	TIME_CMD="/usr/bin/env time"
	TIME_CMD_ARGS="-f \nmem  %M KB\nreal %es\nuser %Us \nsys  %Ss"

	runner() {
		### $CONDITIONAL_INPUT_PIPER $TIME_CMD "$TIME_CMD_ARGS" "$OUTPUT_FILE"

		if [ "$WHICH_INPUT_USED" = "STDIN" ]; then
			$TIME_CMD "$TIME_CMD_ARGS" "$OUTPUT_FILE"
		else
			printf "$INPUT" | $TIME_CMD "$TIME_CMD_ARGS" "$OUTPUT_FILE"
		fi
	}

else
	TIME_CMD="time"
	TIME_CMD_ARGS=""

	# TODO FIXME: BROKEN
	### automatically ~~taken~~ NOT taken by bash (wut)
	### TIMEFORMAT=$'\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS\n'

	runner() {
		### $CONDITIONAL_INPUT_PIPER $TIME_CMD  $TIME_CMD_ARGS  "$OUTPUT_FILE"

		if [ "$WHICH_INPUT_USED" = "STDIN" ]; then
			$TIME_CMD  $TIME_CMD_ARGS  "$OUTPUT_FILE"
		else
			printf "$INPUT" | $TIME_CMD  $TIME_CMD_ARGS  "$OUTPUT_FILE"
		fi
	}

fi

# go go go

printf "BEGIN INPUT\n$INPUT\nEND INPUT\n"
printf "$INPUT_INFO\n\n"

if [ "$SAFE_TO_SKIP_COMPILATION" -eq 1 ]; then
	runner

	printf "\nNO_RECOMPILE"
else
	# do NOT quote $EXTRA_FROM_ALIAS nor $*
	# because this allows them to expand
	# and act as multiple different arguments
	# as opposed to a single one

	g++ -o "$OUTPUT_FILE" "$INPUT_FILE"  $CPP_COMPILER_DEFAULT_ARGS  $EXTRA_FROM_ALIAS  $*  && \
	if [ "$HASHING_ENABLED" -eq 1 ]; then printf "$NEW_HASH" > "$INPUT_HASH_FILE"; fi && \
	runner

	if [ "$FORCE_RECOMPILE" -eq 1 ]; then
		printf "\nFORCE_RECOMPILE"
	else
		if [ "$FIRST_TIME_COMPILE" -eq 1 ]; then
			printf "\nCOMPILE"
		else
			printf "\nRECOMPILE"
		fi
	fi
fi

printf "\n\n"

