#!/usr/bin/env bash
# the good stuff

if [ -z "$1" ] || [ -z "$2" ]; then
	printf "\
usage:

cputils-run \"MODE_AND_EXTRA_COMPILER_ARGS\" FILENAME.cpp [- [INPUT_FILE]]

  where
    MODE_AND_EXTRA_COMPILER_ARGS    = DEBUG or EVAL or custom #define
                                      plus any other arguments to the g++ compiler
                                      note: don't forget quotes around it if
                                            you're passing in stuff with spaces

    FILENAME.cpp                    = source file you want to run

    -                               = reuse previous input
                                      instead of reading from clipboard

    INPUT_FILE                      = input file to take input from.
                                      default: FILENAME.cpp.in


  examples:
    with DEBUG define:
      cputils-run DEBUG a.cpp               # reads input from clipboard
      cputils-run DEBUG a.cpp -             # reads input from file \"a.cpp.in\"
      cputils-run DEBUG a.cpp - in          # reads input from file \"in\"

    with EVAL define:
      cputils-run EVAL  a.cpp               # reads input from clipboard
      cputils-run EVAL  a.cpp -             # reads input from file \"a.cpp.in\"
      cputils-run EVAL  a.cpp - in          # reads input from file \"in\"

    with define + extra args to the g++ compiler (quotes necessary):
      cputils-run \"DEBUG -std=c++98 -Wextra -Wpedantic -O2\"  a.cpp

"
	exit 1
else
	MODE_DEFINE_AND_EXTRA_COMPILER_ARGS="$1"
	shift
fi

INPUT_FILE="$1"

# remove extension & add ".out" suffix (easier to .gitignore etc)
# https://stackoverflow.com/a/36341390/9285308
OUTPUT_FILE="${INPUT_FILE%.*}.out"

# INPUT_FROM_CLIPBOARD="$(xclip -selection primary -o || xclip -selection clipboard -o)"
INPUT_FROM_CLIPBOARD="$(xclip -selection clipboard -o || xclip -selection primary -o)"

INPUT_CACHE_FILE="$1.in"
touch "$INPUT_CACHE_FILE"
INPUT_FROM_CACHE_FILE="$(cat $INPUT_CACHE_FILE)"

if [ -z "$2" ]; then
	WHICH_INPUT_USED="CLIPBOARD"
	INPUT="$INPUT_FROM_CLIPBOARD"

	# prepend the input from clipboard into the cache file
	mv "$INPUT_CACHE_FILE" "$INPUT_CACHE_FILE.bp"
	printf "$INPUT\n\n\n" >> "$INPUT_CACHE_FILE"
	cat "$INPUT_CACHE_FILE.bp" >> "$INPUT_CACHE_FILE"
	rm "$INPUT_CACHE_FILE.bp"
elif [ -z "$3" ]; then
	WHICH_INPUT_USED="FILE ($INPUT_CACHE_FILE)"

	INPUT="$INPUT_FROM_CACHE_FILE"

	# do not prepend the input
else
	WHICH_INPUT_USED="FILE ($3)"

	INPUT_FROM_CUSTOM_FILE="$(cat $3)"
	INPUT="$INPUT_FROM_CUSTOM_FILE"
fi

printf "BEGIN INPUT\n$INPUT\nEND INPUT\n"
printf "$WHICH_INPUT_USED\n\n"

# run based on time cmd (best if GNU /usr/bin/time is available)
if command -v /usr/bin/env time &>/dev/null; then
	TIME_CMD="/usr/bin/env time"
	TIME_CMD_ARGS="-f \nmem  %M KB\nreal %es\nuser %Us \nsys  %Ss\n"

	# note: do NOT quote $MODE_DEFINE_AND_EXTRA_COMPILER_ARGS --
	# this allows the user to provide extra arguments
	# and/or overrides to the g++ compiler.

	g++ -std=c++17 -Wall -o "$OUTPUT_FILE" "$INPUT_FILE" -D $MODE_DEFINE_AND_EXTRA_COMPILER_ARGS && \
	printf "$INPUT\n" | ($TIME_CMD "$TIME_CMD_ARGS" "$OUTPUT_FILE")
else
	g++ -std=c++17 -Wall -o "$OUTPUT_FILE" "$INPUT_FILE" -D $MODE_DEFINE_AND_EXTRA_COMPILER_ARGS && \
	printf "$INPUT\n" | (time                       "$OUTPUT_FILE")
fi

